object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(0:1, 100, replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rep(rbinom(1, size = 1, prob = 0.7), 100)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
t2
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays((d1))
weekdays(d1)
weekdays(t1)
months(t1)
quarters(t2)
t3 <-  "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(cars$Mileage, cars$Price)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$Mileage, y = cars$Price)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist)
info()
skip()
swirl()
skip()
swirl()
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab="Speed")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, main="My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars,  xlim = c(10, 15))
plot(cars,  pch=2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(mpg~cyl, data=mtcars)
hist(mtcars$mpg)
install_from_swirl("Getting and Cleaning Data")
install_from_swirl("Statistical Inference")
setwd("~/Documents/Academic/GettingCleaningDataProj")
?read.table
library(dplyr)
# 1. Merges the training and the test sets to create one data set.
# Read in the Train test dataset
x.train <- read.table("../UCI HAR Dataset/train/X_test.txt", sep="", header=FALSE)
y.train <- read.table("UCI HAR Dataset/train/y_test.txt", sep="", header=FALSE)
subject.train <- read.table("UCI HAR Dataset/train/subject_test.txt", sep="", header=FALSE)
# Read in the Test test dataset
x.test <- read.csv("../UCI HAR Dataset/test/X_test.txt", sep="", header=FALSE)
y.test <- read.csv("UCI HAR Dataset/test/y_test.txt", sep="", header=FALSE)
subject.test <- read.csv("UCI HAR Dataset/test/subject_test.txt", sep="", header=FALSE)
rm(x.test)
library(dplyr)
# 1. Merges the training and the test sets to create one data set.
# Read in the Train test dataset
x.train <- read.table("../UCI HAR Dataset/train/X_train.txt", sep="", header=FALSE)
y.train <- read.table("../UCI HAR Dataset/train/y_train.txt", sep="", header=FALSE)
subject.train <- read.table("../UCI HAR Dataset/train/subject_train.txt", sep="", header=FALSE)
# Read in the Test test dataset
x.test <- read.table("../UCI HAR Dataset/test/X_test.txt", sep="", header=FALSE)
y.test <- read.table("../UCI HAR Dataset/test/y_test.txt", sep="", header=FALSE)
subject.test <- read.table("../UCI HAR Dataset/test/subject_test.txt", sep="", header=FALSE)
features <- read.table("../UCI HAR Dataset/features.txt")
headers <- features[,2]
names(x.test) <- headers
names(x.train) <- headers
mean_and_std <- grepl("mean\\(\\)|std\\(\\)", headers) #identify columns related to mean and std
x.test.mean_and_std <- x.test[,mean_and_std]
X.train.mean_and_std <- x.train[,mean_and_std]
head(x.test)
library(dplyr)
# 1. Merges the training and the test sets to create one data set.
# Read in the Train test dataset
x.train <- read.table("../UCI HAR Dataset/train/X_train.txt", sep="", header=FALSE)
y.train <- read.table("../UCI HAR Dataset/train/y_train.txt", sep="", header=FALSE)
subject.train <- read.table("../UCI HAR Dataset/train/subject_train.txt", sep="", header=FALSE)
train <- data.frame(subject.train, y.train, x.train) # Merge part data into one
# Read in the Test test dataset
x.test <- read.table("../UCI HAR Dataset/test/X_test.txt", sep="", header=FALSE)
y.test <- read.table("../UCI HAR Dataset/test/y_test.txt", sep="", header=FALSE)
subject.test <- read.table("../UCI HAR Dataset/test/subject_test.txt", sep="", header=FALSE)
test <- data.frame(subject.test, y.test, x.test) # Merge part data into one
# Get the ouput for Step 1 and remove intermediate data to release memory
run.data <- rbind(train, test)
remove(subject.test, x.test, y.test, subject.train, x.train, y.train, test, train)
library(dplyr)
# 1. Merges the training and the test sets to create one data set.
# Read in the Train test dataset
x.train <- read.table("../UCI HAR Dataset/train/X_train.txt", sep="", header=FALSE)
y.train <- read.table("../UCI HAR Dataset/train/y_train.txt", sep="", header=FALSE)
subject.train <- read.table("../UCI HAR Dataset/train/subject_train.txt", sep="", header=FALSE)
train <- cind(subject.train, y.train, x.train) # Merge part data into one
# Read in the Test test dataset
x.test <- read.table("../UCI HAR Dataset/test/X_test.txt", sep="", header=FALSE)
y.test <- read.table("../UCI HAR Dataset/test/y_test.txt", sep="", header=FALSE)
subject.test <- read.table("../UCI HAR Dataset/test/subject_test.txt", sep="", header=FALSE)
test <- cind(subject.test, y.test, x.test) # Merge part data into one
# Get the ouput for Step 1 and remove intermediate data to release memory
run.data <- rbind(train, test)
remove(subject.test, x.test, y.test, subject.train, x.train, y.train, test, train)
library(dplyr)
# 1. Merges the training and the test sets to create one data set.
# Read in the Train test dataset
x.train <- read.table("../UCI HAR Dataset/train/X_train.txt", sep="", header=FALSE)
y.train <- read.table("../UCI HAR Dataset/train/y_train.txt", sep="", header=FALSE)
subject.train <- read.table("../UCI HAR Dataset/train/subject_train.txt", sep="", header=FALSE)
train <- cbind(subject.train, y.train, x.train) # Merge part data into one
# Read in the Test test dataset
x.test <- read.table("../UCI HAR Dataset/test/X_test.txt", sep="", header=FALSE)
y.test <- read.table("../UCI HAR Dataset/test/y_test.txt", sep="", header=FALSE)
subject.test <- read.table("../UCI HAR Dataset/test/subject_test.txt", sep="", header=FALSE)
test <- cbind(subject.test, y.test, x.test) # Merge part data into one
# Get the ouput for Step 1 and remove intermediate data to release memory
run.data <- rbind(train, test)
remove(subject.test, x.test, y.test, subject.train, x.train, y.train, test, train)
features <- read.table("../UCI HAR Dataset/features.txt", sep="", header=FALSE)
column.names <- as.vector(features[, 2])        # Convert the 2nd column into a vector
colnames(run.data) <- c("subject_id", "activity_labels", column.names)
# With all column names meaningful, we can extract data easily
run.data <- select(run.data, contains("subject"), contains("labels"),
contains("mean"), contains("std"), -contains("freq"),
-contains("angle"))
run.data <- select(run.data, contains("subject"), contains("labels"),
contains("mean"), contains("std"), -contains("freq"),
-contains("angle"))
run.data <- select(run.data, contains("subject"), contains("labels"),
contains("mean"), contains("std"))
library(dplyr)
# 1. Merges the training and the test sets to create one data set.
# Read in the Train test dataset
x.train <- read.table("../UCI HAR Dataset/train/X_train.txt", sep="", header=FALSE)
y.train <- read.table("../UCI HAR Dataset/train/y_train.txt", sep="", header=FALSE)
subject.train <- read.table("../UCI HAR Dataset/train/subject_train.txt", sep="", header=FALSE)
# Read in the Test test dataset
x.test <- read.table("../UCI HAR Dataset/test/X_test.txt", sep="", header=FALSE)
y.test <- read.table("../UCI HAR Dataset/test/y_test.txt", sep="", header=FALSE)
subject.test <- read.table("../UCI HAR Dataset/test/subject_test.txt", sep="", header=FALSE)
# Merge data, save ouput for Step 1, and remove intermediate data to release memory
train <- cbind(subject.train, y.train, x.train)
test <- cbind(subject.test, y.test, x.test)
run.data <- rbind(train, test)
remove(subject.test, x.test, y.test, subject.train, x.train, y.train, test, train)
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
# Read features name, pass it to the data, and use it to extract columns
#       To do so, I will finish Step 3 first, so that we can use column names to do the job.
features <- read.table("../UCI HAR Dataset/features.txt", sep="", header=FALSE)
column.names <- as.vector(features[, 2])        # Convert the 2nd column into a vector
colnames(run.data) <- c("subject_id", "activity_labels", column.names)
run.data <- select(run.data, contains("subject"), contains("labels"),
contains("mean"), contains("std"), -contains("freq"),
-contains("angle"))
test <- select(run.data, contains("subject"))
test <- select(run.data, contains("subject"))
library(dplyr)
test <- select(run.data, contains("subject"))
View(run.data)
test <- select(run.data, contains("subject"))
test
test <- select(run.data, contains("subject"))
?select
test <- select(run.data, contains("subject"))
test <- uniuqe(column.names)
test <- unique(column.names)
features <- read.table("../UCI HAR Dataset/features.txt", sep="", header=FALSE)
test <- unique(features[,2])
features <- read.csv("../UCI HAR Dataset/features.txt", sep="", header=FALSE)
test <- unique(features[,2])
class(test)
getwd()
View(features)
features <- read.csv("../UCI HAR Dataset/features.txt", sep="", header=FALSE)
column.names <- as.vector(features[,2])
column.needed <- grep(".*[M|m]ean.*|.*[S|s]td.*", features[,2])
# With all column names meaningful, we can extract data easily
allData <- allData[,c(1, 2, column.needed)]
features <- read.csv("../UCI HAR Dataset/features.txt", sep="", header=FALSE)
column.names <- as.vector(features[,2])
column.needed <- grep(".*[M|m]ean.*|.*[S|s]td.*", features[,2])
# With all column names meaningful, we can extract data easily
run.data <- run.data[,c(1, 2, column.needed)]
head(run.data)
colnames(run.data)
features <- read.csv("../UCI HAR Dataset/features.txt", sep="", header=FALSE)
column.names <- as.vector(features[,2])
column.needed <- grep(".*[M|m]ean.*|.*[S|s]td.*", features[,2])
# With all column names meaningful, we can extract data easily
run.data <- run.data[, column.needed]
features <- read.csv("../UCI HAR Dataset/features.txt", sep="", header=FALSE)
column.names <- as.vector(features[,2])
column.needed <- as.vector(grep(".*[M|m]ean.*|.*[S|s]td.*", features[,2]))
# With all column names meaningful, we can extract data easily
run.data <- run.data[, column.needed]
features <- read.csv("../UCI HAR Dataset/features.txt", sep="", header=FALSE)
column.names <- as.vector(features[,2])
column.needed <- as.vector(grep(".*[M|m]ean.*|.*[S|s]td.*", features[,2]))
# With all column names meaningful, we can extract data easily
run.data <- run.data[, column.needed]
features <- read.csv("../UCI HAR Dataset/features.txt", sep="", header=FALSE)
column.names <- as.vector(features[,2])
column.needed <- grep(".*[M|m]ean.*|.*[S|s]td.*", column.names)
# With all column names meaningful, we can extract data easily
run.data <- run.data[, column.needed]
features <- read.csv("../UCI HAR Dataset/features.txt", sep="", header=FALSE)
column.names <- as.vector(features[,2])
column.needed <- grep(".*[M|m]ean.*|.*[S|s]td.*", column.names)
# With all column names meaningful, we can extract data easily
run.data <- run.data[, c(1,2, column.needed+2)]
features <- read.csv("../UCI HAR Dataset/features.txt", sep="", header=FALSE)
column.names <- as.vector(features[,2])
column.needed <- grep(".*[M|m]ean.*|.*[S|s]td.*", features[,2])
# With all column names meaningful, we can extract data easily
run.data <- run.data[, c(1,2, column.needed+2)]
test <- column.needed+2
library(dplyr)
# 1. Merges the training and the test sets to create one data set.
# Read in the Train test dataset
x.train <- read.table("../UCI HAR Dataset/train/X_train.txt", sep="", header=FALSE)
y.train <- read.table("../UCI HAR Dataset/train/y_train.txt", sep="", header=FALSE)
subject.train <- read.table("../UCI HAR Dataset/train/subject_train.txt", sep="", header=FALSE)
# Read in the Test test dataset
x.test <- read.table("../UCI HAR Dataset/test/X_test.txt", sep="", header=FALSE)
y.test <- read.table("../UCI HAR Dataset/test/y_test.txt", sep="", header=FALSE)
subject.test <- read.table("../UCI HAR Dataset/test/subject_test.txt", sep="", header=FALSE)
# Merge data, save ouput for Step 1, and remove intermediate data to release memory
train <- cbind(subject.train, y.train, x.train)
test <- cbind(subject.test, y.test, x.test)
run.data <- rbind(train, test)
remove(subject.test, x.test, y.test, subject.train, x.train, y.train, test, train)
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
# Read features name, pass it to the data, and use it to extract columns
#       To do so, I will finish Step 3 first, so that we can use column names to do the job.
features <- read.csv("../UCI HAR Dataset/features.txt", sep="", header=FALSE)
column.names <- as.vector(features[,2])
column.needed <- grep(".*[M|m]ean.*|.*[S|s]td.*", features[,2])
# With all column names meaningful, we can extract data easily
run.data <- run.data[, c(1,2, column.needed+2)]
View(run.data)
library(dplyr)
# 1. Merges the training and the test sets to create one data set.
# Read in the Train test dataset
x.train <- read.table("../UCI HAR Dataset/train/X_train.txt", sep="", header=FALSE)
y.train <- read.table("../UCI HAR Dataset/train/y_train.txt", sep="", header=FALSE)
subject.train <- read.table("../UCI HAR Dataset/train/subject_train.txt", sep="", header=FALSE)
# Read in the Test test dataset
x.test <- read.table("../UCI HAR Dataset/test/X_test.txt", sep="", header=FALSE)
y.test <- read.table("../UCI HAR Dataset/test/y_test.txt", sep="", header=FALSE)
subject.test <- read.table("../UCI HAR Dataset/test/subject_test.txt", sep="", header=FALSE)
# Merge data, save ouput for Step 1, and remove intermediate data to release memory
train <- cbind(subject.train, y.train, x.train)
test <- cbind(subject.test, y.test, x.test)
run.data <- rbind(train, test)
remove(subject.test, x.test, y.test, subject.train, x.train, y.train, test, train)
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
# Read features name, pass it to the data, and use it to extract columns
#       To do so, I will finish Step 3 first, so that we can use column names to do the job.
features <- read.csv("../UCI HAR Dataset/features.txt", sep="", header=FALSE)
column.names <- as.vector(features[,2])
column.needed <- grep(".*[M|m]ean.*|.*[S|s]td.*", column.names)
# With all column names meaningful, we can extract data easily
run.data <- run.data[, c(1,2, column.needed+2)]
colnames(run.data) <- c("subject_id", "activity_labels", column.names[column.needed])
colnames(run.data)
library(dplyr)
# 1. Merges the training and the test sets to create one data set.
# Read in the Train test dataset
x.train <- read.table("../UCI HAR Dataset/train/X_train.txt", sep="", header=FALSE)
y.train <- read.table("../UCI HAR Dataset/train/y_train.txt", sep="", header=FALSE)
subject.train <- read.table("../UCI HAR Dataset/train/subject_train.txt", sep="", header=FALSE)
# Read in the Test test dataset
x.test <- read.table("../UCI HAR Dataset/test/X_test.txt", sep="", header=FALSE)
y.test <- read.table("../UCI HAR Dataset/test/y_test.txt", sep="", header=FALSE)
subject.test <- read.table("../UCI HAR Dataset/test/subject_test.txt", sep="", header=FALSE)
# Merge data, save ouput for Step 1, and remove intermediate data to release memory
train <- cbind(subject.train, y.train, x.train)
test <- cbind(subject.test, y.test, x.test)
run.data <- rbind(train, test)
remove(subject.test, x.test, y.test, subject.train, x.train, y.train, test, train)
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
# Read features name, pass it to the data, and use it to extract columns
#       To do so, I will finish Step 3 first, so that we can use column names to do the job.
features <- read.csv("../UCI HAR Dataset/features.txt", sep="", header=FALSE)
column.names <- as.vector(features[,2])
column.needed <- grep(".*mean.*|.*std.*", column.names)
# With all column names meaningful, we can extract data easily
run.data <- run.data[, c(1,2, column.needed+2)]
colnames(run.data) <- c("subject_id", "activity_labels", column.names[column.needed])
library(dplyr)
# 1. Merges the training and the test sets to create one data set.
# Read in the Train test dataset
x.train <- read.table("../UCI HAR Dataset/train/X_train.txt", sep="", header=FALSE)
y.train <- read.table("../UCI HAR Dataset/train/y_train.txt", sep="", header=FALSE)
subject.train <- read.table("../UCI HAR Dataset/train/subject_train.txt", sep="", header=FALSE)
# Read in the Test test dataset
x.test <- read.table("../UCI HAR Dataset/test/X_test.txt", sep="", header=FALSE)
y.test <- read.table("../UCI HAR Dataset/test/y_test.txt", sep="", header=FALSE)
subject.test <- read.table("../UCI HAR Dataset/test/subject_test.txt", sep="", header=FALSE)
# Merge data, save ouput for Step 1, and remove intermediate data to release memory
train <- cbind(subject.train, y.train, x.train)
test <- cbind(subject.test, y.test, x.test)
run.data <- rbind(train, test)
remove(subject.test, x.test, y.test, subject.train, x.train, y.train, test, train)
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
features <- read.table("../UCI HAR Dataset/features.txt", sep="", header=FALSE)
column.names <- as.vector(features[,2])
# Identify columns represent mean or std.
column.needed <- grep(".*[M|m]ean.*|.*[S|s]td.*", column.names)
run.data <- run.data[, c(1,2, column.needed+2)] # Right shift 2 due to subject and y table
# 3. Uses descriptive activity names to name the activities in the data set
colnames(run.data) <- c("subject_id", "activity_labels", column.names[column.needed])
remove(features, column.needed, column.names)
# 4. Appropriately labels the data set with descriptive variable names.
activity.labels <- read.table("../UCI HAR Dataset/activity_labels.txt", sep="", header=FALSE)
View(activity.labels)
library(dplyr)
# 1. Merges the training and the test sets to create one data set.
# Read in the Train test dataset
x.train <- omit.na(read.table("../UCI HAR Dataset/train/X_train.txt", sep="", header=FALSE))
y.train <- omit.na(read.table("../UCI HAR Dataset/train/y_train.txt", sep="", header=FALSE))
subject.train <- omit.na(read.table("../UCI HAR Dataset/train/subject_train.txt", sep="", header=FALSE))
# Read in the Test test dataset
x.test <- omit.na(read.table("../UCI HAR Dataset/test/X_test.txt", sep="", header=FALSE))
y.test <- omit.na(read.table("../UCI HAR Dataset/test/y_test.txt", sep="", header=FALSE))
subject.test <- omit.na(read.table("../UCI HAR Dataset/test/subject_test.txt", sep="", header=FALSE))
# Merge data, save ouput for Step 1, and remove intermediate data to release memory
train <- cbind(subject.train, y.train, x.train)
test <- cbind(subject.test, y.test, x.test)
run.data <- rbind(train, test)
remove(subject.test, x.test, y.test, subject.train, x.train, y.train, test, train)
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
features <- omit.na(read.table("../UCI HAR Dataset/features.txt", sep="", header=FALSE))
column.names <- as.vector(features[,2])
# Identify columns represent mean or std.
column.needed <- grep(".*[M|m]ean.*|.*[S|s]td.*", column.names)
run.data <- run.data[, c(1,2, column.needed+2)] # Right shift 2 due to subject and y table
# 3. Uses descriptive activity names to name the activities in the data set
colnames(run.data) <- c("subject_id", "activity_labels", column.names[column.needed])
remove(features, column.needed, column.names)
# 4. Appropriately labels the data set with descriptive variable names.
activity.labels <- omit.na(read.table("../UCI HAR Dataset/activity_labels.txt", sep="", header=FALSE))
library(dplyr)
# 1. Merges the training and the test sets to create one data set.
# Read in the Train test dataset
x.train <- read.table("../UCI HAR Dataset/train/X_train.txt", sep="", header=FALSE)
y.train <- read.table("../UCI HAR Dataset/train/y_train.txt", sep="", header=FALSE)
subject.train <- read.table("../UCI HAR Dataset/train/subject_train.txt", sep="", header=FALSE)
# Read in the Test test dataset
x.test <- read.table("../UCI HAR Dataset/test/X_test.txt", sep="", header=FALSE)
y.test <- read.table("../UCI HAR Dataset/test/y_test.txt", sep="", header=FALSE)
subject.test <- read.table("../UCI HAR Dataset/test/subject_test.txt", sep="", header=FALSE)
# Merge data, save ouput for Step 1, and remove intermediate data to release memory
train <- cbind(subject.train, y.train, x.train)
test <- cbind(subject.test, y.test, x.test)
run.data <- rbind(train, test)
remove(subject.test, x.test, y.test, subject.train, x.train, y.train, test, train)
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
features <- read.table("../UCI HAR Dataset/features.txt", sep="", header=FALSE)
column.names <- as.vector(features[,2])
# Identify columns represent mean or std.
column.needed <- grep(".*[M|m]ean.*|.*[S|s]td.*", column.names)
run.data <- run.data[, c(1,2, column.needed+2)] # Right shift 2 due to subject and y table
# 3. Uses descriptive activity names to name the activities in the data set
colnames(run.data) <- c("subject_id", "activity_labels", column.names[column.needed])
remove(features, column.needed, column.names)
# 4. Appropriately labels the data set with descriptive variable names.
activity.labels <- read.table("../UCI HAR Dataset/activity_labels.txt", sep="", header=FALSE)
str(run.data)
str(activity.labels)
?merge
library(dplyr)
# 1. Merges the training and the test sets to create one data set.
# Read in the Train test dataset
x.train <- read.table("../UCI HAR Dataset/train/X_train.txt", sep="", header=FALSE)
y.train <- read.table("../UCI HAR Dataset/train/y_train.txt", sep="", header=FALSE)
subject.train <- read.table("../UCI HAR Dataset/train/subject_train.txt", sep="", header=FALSE)
# Read in the Test test dataset
x.test <- read.table("../UCI HAR Dataset/test/X_test.txt", sep="", header=FALSE)
y.test <- read.table("../UCI HAR Dataset/test/y_test.txt", sep="", header=FALSE)
subject.test <- read.table("../UCI HAR Dataset/test/subject_test.txt", sep="", header=FALSE)
# Merge data, save ouput for Step 1, and remove intermediate data to release memory
train <- cbind(subject.train, y.train, x.train)
test <- cbind(subject.test, y.test, x.test)
run.data <- rbind(train, test)
remove(subject.test, x.test, y.test, subject.train, x.train, y.train, test, train)
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
features <- read.table("../UCI HAR Dataset/features.txt", sep="", header=FALSE)
column.names <- as.vector(features[,2])
# Identify columns represent mean or std.
column.needed <- grep(".*[M|m]ean.*|.*[S|s]td.*", column.names)
run.data <- run.data[, c(1,2, column.needed+2)] # Right shift 2 due to subject and y table
# 4. Appropriately labels the data set with descriptive variable names.
# Do step 4 first because it will be easier to operate with meaning column names
colnames(run.data) <- c("subject_id", "activity_labels_id", column.names[column.needed])
remove(features, column.needed, column.names)
# 3. Uses descriptive activity names to name the activities in the data set
activity.labels <- read.table("../UCI HAR Dataset/activity_labels.txt", sep="",
header=FALSE)
colnames(activity_labels) <- c("activity_labels_id", "activity_labels")
run.data <- merge(run.data, activity.labels, by.x="activity_labels_id", by.y="activity_labels_id")
str(activity.labels)
?read.table
activity.labels <- read.table("../UCI HAR Dataset/activity_labels.txt", sep="",
header=FALSE, col.names = c("activity_labels_id", "activity_labels"),
colClasses = c("integar", "character"))
run.data <- merge(run.data, activity.labels, by.x="activity_labels_id", by.y="activity_labels_id")
View(activity.labels)
str(activity.labels)
rm(activity.labels)
activity.labels <- read.table("../UCI HAR Dataset/activity_labels.txt", sep="",
header=FALSE, col.names = c("activity_labels_id", "activity_labels"),
colClasses = c("integer", "character"))
str(activity.labels)
run.data <- merge(run.data, activity.labels, by.x="activity_labels_id", by.y="activity_labels_id")
?summarise_each
run.data.summary <- select(run.data, -activity_labels_id) %>%
group_by(subject_id, activity_labels) %>%
summarise_each(funs(mean))
View(run.data.summary)
write.csv(run.data.summary, file = "tidy.csv")
library(dplyr)
# 1. Merges the training and the test sets to create one data set.
# Read in the Train test dataset
x.train <- read.table("../UCI HAR Dataset/train/X_train.txt", sep="", header=FALSE)
y.train <- read.table("../UCI HAR Dataset/train/y_train.txt", sep="", header=FALSE)
subject.train <- read.table("../UCI HAR Dataset/train/subject_train.txt", sep="", header=FALSE)
# Read in the Test test dataset
x.test <- read.table("../UCI HAR Dataset/test/X_test.txt", sep="", header=FALSE)
y.test <- read.table("../UCI HAR Dataset/test/y_test.txt", sep="", header=FALSE)
subject.test <- read.table("../UCI HAR Dataset/test/subject_test.txt", sep="", header=FALSE)
# Merge data, save ouput for Step 1, and remove intermediate data to release memory
train <- cbind(subject.train, y.train, x.train)
test <- cbind(subject.test, y.test, x.test)
run.data <- rbind(train, test)
remove(subject.test, x.test, y.test, subject.train, x.train, y.train, test, train)
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
features <- read.table("../UCI HAR Dataset/features.txt", sep="", header=FALSE)
column.names <- as.vector(features[,2])
# Identify columns represent mean or std.
column.needed <- grep(".*[M|m]ean.*|.*[S|s]td.*", column.names)
run.data <- run.data[, c(1,2, column.needed+2)] # Right shift 2 due to subject and y table
# 4. Appropriately labels the data set with descriptive variable names.
# Do step 4 first because it will be easier to operate with meaning column names
colnames(run.data) <- c("subject_id", "activity_labels_id", column.names[column.needed])
remove(features, column.needed, column.names)
# 3. Uses descriptive activity names to name the activities in the data set
activity.labels <- read.table("../UCI HAR Dataset/activity_labels.txt", sep="",
header=FALSE, col.names = c("activity_labels_id", "activity_labels"),
colClasses = c("integer", "character"))
run.data <- merge(run.data, activity.labels, by.x="activity_labels_id", by.y="activity_labels_id")
# 5. From the data set in step 4, creates a second, independent tidy data set with the average of
# each variable for each activity and each subject.
run.data.summary <- select(run.data, -activity_labels_id) %>%
group_by(subject_id, activity_labels) %>%
summarise_each(funs(mean))
write.table(run.data.summary, file = "tidy.txt", row.name=FALSE)
